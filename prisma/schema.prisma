generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  name        String
  isAdmin     Boolean  @default(false)
  leagueId    String?
  league      League?  @relation(fields: [leagueId], references: [id])
  picks       Pick[]
  scores      Score[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model League {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Castaway {
  id             String         @id @default(uuid())
  name           String
  tribe          String?
  occupation     String?
  age            Int?
  hometown       String?
  imageUrl       String?
  weeklyResults  WeeklyResult[]
  picks          Pick[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model WeeklyResult {
  id          String     @id @default(uuid())
  weekNumber  Int
  points      Int
  castawayId  String
  castaway    Castaway   @relation(fields: [castawayId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Pick {
  id          String     @id @default(uuid())
  userId      String
  castawayId  String
  weekNumber  Int
  weekId      String?
  week        Week?      @relation(fields: [weekId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  castaway    Castaway   @relation(fields: [castawayId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Week {
  id          String     @id @default(uuid())
  weekNumber  Int
  isActive    Boolean    @default(false)
  picks       Pick[]
  scores      Score[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Score {
  id          String     @id @default(uuid())
  userId      String
  weekId      String
  points      Int
  week        Week       @relation(fields: [weekId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}